From 7fa76294246ab30c0d0eb0e3dbf9829bb09cb4b4 Mon Sep 17 00:00:00 2001
From: tr7zw <tr7zw@live.de>
Date: Sun, 2 Apr 2023 20:54:46 +0200
Subject: [PATCH] Backport to 1.19.3

---
 .../itemswapper/gui/CopyToClipboard.java      |  4 +++-
 .../itemswapper/overlay/ItemListOverlay.java  | 13 ++++++----
 .../overlay/logic/ItemGridWidget.java         | 12 +++++++---
 .../overlay/logic/ShortcutListWidget.java     |  2 +-
 .../tr7zw/itemswapper/util/RenderHelper.java  | 24 ++++++++-----------
 .../resourcepacks/classic/pack.mcmeta         |  2 +-
 .../resourcepacks/default/pack.mcmeta         |  2 +-
 XTFabric/src/main/resources/fabric.mod.json   |  2 +-
 .../test/java/dev/tr7zw/tests/TestUtil.java   |  4 ----
 gradle-compose.yml                            |  2 +-
 10 files changed, 35 insertions(+), 32 deletions(-)

diff --git a/Shared/src/main/java/dev/tr7zw/itemswapper/gui/CopyToClipboard.java b/Shared/src/main/java/dev/tr7zw/itemswapper/gui/CopyToClipboard.java
index 022274b..684d645 100644
--- a/Shared/src/main/java/dev/tr7zw/itemswapper/gui/CopyToClipboard.java
+++ b/Shared/src/main/java/dev/tr7zw/itemswapper/gui/CopyToClipboard.java
@@ -62,7 +62,9 @@ public class CopyToClipboard extends ImageButton {
     }
 
     @Override
-    public void renderWidget(@NotNull PoseStack poseStack, int i, int j, float f) {
+    public void renderButton(@NotNull PoseStack poseStack, int i, int j, float f) {
+        RenderSystem.setShader(GameRenderer::getPositionTexShader);
+        RenderSystem.setShaderTexture(0, texture);
         RenderSystem.enableDepthTest();
         RenderSystem.enableBlend();
         // FIXME: Cursed and broken, but doesn't scale everything anymore
diff --git a/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/ItemListOverlay.java b/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/ItemListOverlay.java
index b8bf2a0..9e32c1f 100644
--- a/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/ItemListOverlay.java
+++ b/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/ItemListOverlay.java
@@ -96,7 +96,10 @@ public class ItemListOverlay extends ItemSwapperUIAbstractInput {
             renderEntry(poseStack, background, i, originX, originY - slotSize * i, itemRenderList, lateRenderList);
         }
         itemRenderList.forEach(Runnable::run);
+        float blit = this.itemRenderer.blitOffset;
+        this.itemRenderer.blitOffset += 300;
         lateRenderList.forEach(Runnable::run);
+        this.itemRenderer.blitOffset = blit;
     }
 
     @Override
@@ -179,12 +182,12 @@ public class ItemListOverlay extends ItemSwapperUIAbstractInput {
         if (selectedEntry == id) {
             itemRenderList = lateRenderList;
             lateRenderList.add(() -> {
-                poseStack.pushPose();
-                poseStack.translate(0, 0, 300);
+                float blit = getBlitOffset();
+                setBlitOffset((int) this.itemRenderer.blitOffset);
                 RenderSystem.setShader(GameRenderer::getPositionTexShader);
                 RenderSystem.setShaderTexture(0, SELECTION_LOCATION);
                 blit(poseStack, x, y, 0, 0, 24, 24, 24, 24);
-                poseStack.popPose();
+                setBlitOffset((int) blit);
             });
         }
         itemRenderList.add(() -> {
@@ -203,9 +206,9 @@ public class ItemListOverlay extends ItemSwapperUIAbstractInput {
 
     private void renderSlot(PoseStack poseStack, int x, int y, Player arg, ItemStack arg2, int k) {
         if (!arg2.isEmpty()) {
-            this.itemRenderer.renderAndDecorateItem(poseStack, arg, arg2, x, y, k);
+            this.itemRenderer.renderAndDecorateItem(arg, arg2, x, y, k);
             RenderSystem.setShader(GameRenderer::getPositionColorShader);
-            this.itemRenderer.renderGuiItemDecorations(poseStack, this.minecraft.font, arg2, x, y);
+            this.itemRenderer.renderGuiItemDecorations(this.minecraft.font, arg2, x, y);
         }
     }
 
diff --git a/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/logic/ItemGridWidget.java b/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/logic/ItemGridWidget.java
index 4fcc4e0..0497cb2 100644
--- a/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/logic/ItemGridWidget.java
+++ b/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/logic/ItemGridWidget.java
@@ -46,8 +46,11 @@ public abstract class ItemGridWidget implements GuiWidget {
         }
         RenderSystem.enableBlend();
         itemRenderList.forEach(Runnable::run);
+        float blit = this.itemRenderer.blitOffset;
+        this.itemRenderer.blitOffset += 300;
         RenderSystem.enableBlend();
         lateRenderList.forEach(Runnable::run);
+        this.itemRenderer.blitOffset = blit;
     }
 
     private void renderSelection(Screen parent, PoseStack poseStack, int listId, int x, int y,
@@ -62,9 +65,12 @@ public abstract class ItemGridWidget implements GuiWidget {
         GuiSlot guiSlot = getSlots().get(listId);
         if (guiSlot.selected().get()) {
             itemRenderList = lateRenderList;
-                RenderSystem.setShader(GameRenderer::getPositionTexShader);
-                RenderSystem.setShaderTexture(0, WidgetUtil.SELECTION_LOCATION);
-                GuiComponent.blit(poseStack, x - 1, y, 200, 0, 0, 24, 24, 24, 24);
+            float blit = parent.getBlitOffset();
+            parent.setBlitOffset((int) this.itemRenderer.blitOffset);
+            RenderSystem.setShader(GameRenderer::getPositionTexShader);
+            RenderSystem.setShaderTexture(0, WidgetUtil.SELECTION_LOCATION);
+            GuiComponent.blit(poseStack, x - 1, y, parent.getBlitOffset(), 0, 0, 24, 24, 24, 24);
+            parent.setBlitOffset((int) blit);
         }
         renderSlot(poseStack, x, y, itemRenderList, guiSlot, overwrideAvailable);
     }
diff --git a/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/logic/ShortcutListWidget.java b/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/logic/ShortcutListWidget.java
index a82d02e..005e6a7 100644
--- a/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/logic/ShortcutListWidget.java
+++ b/Shared/src/main/java/dev/tr7zw/itemswapper/overlay/logic/ShortcutListWidget.java
@@ -59,7 +59,7 @@ public class ShortcutListWidget extends ItemGridWidget {
         } else if (icon instanceof TextureIcon texture) {
             RenderSystem.setShader(GameRenderer::getPositionTexShader);
             RenderSystem.setShaderTexture(0, texture.texture());
-            GuiComponent.blit(poseStack, x-1, y, 200, 0, 0, 24, 24, 24, 24);
+            GuiComponent.blit(poseStack, x - 1, y, (int) this.itemRenderer.blitOffset + 500, 0, 0, 24, 24, 24, 24);
         }
     }
 
diff --git a/Shared/src/main/java/dev/tr7zw/itemswapper/util/RenderHelper.java b/Shared/src/main/java/dev/tr7zw/itemswapper/util/RenderHelper.java
index a9c3ae7..b7bb9fd 100644
--- a/Shared/src/main/java/dev/tr7zw/itemswapper/util/RenderHelper.java
+++ b/Shared/src/main/java/dev/tr7zw/itemswapper/util/RenderHelper.java
@@ -27,6 +27,7 @@ import net.minecraft.world.item.ItemStack;
 public final class RenderHelper {
 
     private static final Minecraft minecraft = Minecraft.getInstance();
+    private static float blitOffset;
 
     private RenderHelper() {
         // private
@@ -36,7 +37,6 @@ public final class RenderHelper {
             int j, int k, SlotEffect effect) {
         if (itemStack.isEmpty())
             return;
-        float blitOffset = 0;
         BakedModel bakedModel = minecraft.getItemRenderer().getModel(itemStack, null, livingEntity, k);
         blitOffset = bakedModel.isGui3d() ? (blitOffset + 50.0F) : (blitOffset + 50.0F);
         int l = i;
@@ -50,9 +50,9 @@ public final class RenderHelper {
         // these values need to be fixed when the texture size gets fixed.
         GuiComponent.fill(poseStack, l - 1, m - 1, l + 17, m + 17, color);
         ItemRenderer itemRenderer = minecraft.getItemRenderer();
-        itemRenderer.renderAndDecorateFakeItem(poseStack, itemStack, l, m);
+        itemRenderer.renderAndDecorateFakeItem(itemStack, l, m);
         if (k == 0)
-            itemRenderer.renderGuiItemDecorations(poseStack, minecraft.font, itemStack, l, m);
+            itemRenderer.renderGuiItemDecorations(minecraft.font, itemStack, l, m);
         blitOffset = bakedModel.isGui3d() ? (blitOffset - 50.0F) : (blitOffset - 50.0F);
     }
 
@@ -71,11 +71,11 @@ public final class RenderHelper {
     public static void renderGuiItemText(Font font, List<FormattedCharSequence> text, int x, int y, int color) {
         PoseStack poseStack = new PoseStack();
         for(int line = 0; line < text.size(); line++) {
-            poseStack.translate(0.0D, 0.0D, (400.0F));
+            poseStack.translate(0.0D, 0.0D, (minecraft.getItemRenderer().blitOffset + 200.0F));
             MultiBufferSource.BufferSource bufferSource = MultiBufferSource
                     .immediate(Tesselator.getInstance().getBuilder());
             font.drawInBatch(text.get(line), (x - font.width(text.get(line)) / 2), y - (font.lineHeight * (text.size() - line)), color, true,
-                    poseStack.last().pose(), bufferSource, Font.DisplayMode.NORMAL, 0, 15728880);
+                    poseStack.last().pose(), bufferSource, false, 0, 15728880);
             bufferSource.endBatch();
         }
     }
@@ -83,11 +83,11 @@ public final class RenderHelper {
     public static void renderGuiItemText(Font font, String text, int i, int j, int color) {
         PoseStack poseStack = new PoseStack();
         String string2 = text;
-        poseStack.translate(0.0D, 0.0D, 400.0F);
+        poseStack.translate(0.0D, 0.0D, (minecraft.getItemRenderer().blitOffset + 200.0F));
         MultiBufferSource.BufferSource bufferSource = MultiBufferSource
                 .immediate(Tesselator.getInstance().getBuilder());
-        font.drawInBatch(string2, (float)i, (float)j, color, true,
-                poseStack.last().pose(), bufferSource, Font.DisplayMode.NORMAL, 0, 15728880);
+        font.drawInBatch(string2, i, j, color, true,
+                poseStack.last().pose(), bufferSource, false, 0, 15728880);
         bufferSource.endBatch();
     }
     
@@ -98,22 +98,18 @@ public final class RenderHelper {
     public static void renderSlot(PoseStack poseStack, int x, int y, Player arg, ItemStack arg2, int k, SlotEffect effect,
             int count) {
         if (!arg2.isEmpty()) {
-            poseStack.pushPose();
-            poseStack.translate(0, 0, 200);
             ItemStack copy = arg2.copy();
             copy.setCount(1);
             if (effect != SlotEffect.NONE) {
                 RenderHelper.renderUnavailableItem(poseStack, arg, copy, x, y, k, effect);
-                poseStack.popPose();
                 return;
             }
-            minecraft.getItemRenderer().renderAndDecorateItem(poseStack, arg, copy, x, y, k);
+            minecraft.getItemRenderer().renderAndDecorateItem(arg, copy, x, y, k);
             RenderSystem.setShader(GameRenderer::getPositionColorShader);
-            minecraft.getItemRenderer().renderGuiItemDecorations(poseStack, minecraft.font, copy, x, y);
+            minecraft.getItemRenderer().renderGuiItemDecorations(minecraft.font, copy, x, y);
             int color = count > 64 ? 0xFFFF00 : 0xFFFFFF;
             if (count > 1)
                 RenderHelper.renderGuiItemCount(minecraft.font, "" + Math.min(64, count), x, y, color);
-            poseStack.popPose();
         }
     }
 
diff --git a/Shared/src/main/resources/resourcepacks/classic/pack.mcmeta b/Shared/src/main/resources/resourcepacks/classic/pack.mcmeta
index 4bf5b4c..e2aeda5 100644
--- a/Shared/src/main/resources/resourcepacks/classic/pack.mcmeta
+++ b/Shared/src/main/resources/resourcepacks/classic/pack.mcmeta
@@ -1,6 +1,6 @@
 {
   "pack": {
-    "pack_format": 13,
+    "pack_format": 12,
     "description": "ItemSwapper classic palettes"
   }
 }
\ No newline at end of file
diff --git a/Shared/src/main/resources/resourcepacks/default/pack.mcmeta b/Shared/src/main/resources/resourcepacks/default/pack.mcmeta
index 7592bf6..792e962 100644
--- a/Shared/src/main/resources/resourcepacks/default/pack.mcmeta
+++ b/Shared/src/main/resources/resourcepacks/default/pack.mcmeta
@@ -1,6 +1,6 @@
 {
   "pack": {
-    "pack_format": 13,
+    "pack_format": 12,
     "description": "ItemSwapper default palettes V2"
   }
 }
\ No newline at end of file
diff --git a/XTFabric/src/main/resources/fabric.mod.json b/XTFabric/src/main/resources/fabric.mod.json
index 9be1ef8..cdcea0c 100644
--- a/XTFabric/src/main/resources/fabric.mod.json
+++ b/XTFabric/src/main/resources/fabric.mod.json
@@ -70,7 +70,7 @@
   
     "depends": {
       "fabric-api": "*",
-      "minecraft": "1.19.4"
+      "minecraft": "1.19.3"
     },
     "custom": {
       "modmenu": {
diff --git a/XTFabric/src/test/java/dev/tr7zw/tests/TestUtil.java b/XTFabric/src/test/java/dev/tr7zw/tests/TestUtil.java
index 82547ed..37b7b1d 100644
--- a/XTFabric/src/test/java/dev/tr7zw/tests/TestUtil.java
+++ b/XTFabric/src/test/java/dev/tr7zw/tests/TestUtil.java
@@ -91,10 +91,6 @@ public class TestUtil {
                 return null;
             }
 
-            @Override
-            public String getOrDefault(String paramString1, String paramString2) {
-                return (String) storage.getOrDefault(paramString1, paramString2);
-            }
         };
     }
     
diff --git a/gradle-compose.yml b/gradle-compose.yml
index e0beea2..fe844c4 100644
--- a/gradle-compose.yml
+++ b/gradle-compose.yml
@@ -1,5 +1,5 @@
 version: '0.0.2'
-source: "https://github.com/tr7zw/ModComposeTemplate/tree/1.19.4"
+source: "https://github.com/tr7zw/ModComposeTemplate/tree/1.19.3"
 replacements:
   name: "ItemSwapper"
   id: "itemswapper"
-- 
2.32.0.windows.2

